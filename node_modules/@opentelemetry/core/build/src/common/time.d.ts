/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as types from '@opentelemetry/types';
/**
 * Returns an hrtime calculated via performance component.
 * @param performanceNow
 */
export declare function hrTime(performanceNow?: number): types.HrTime;
/**
 *
 * Converts a TimeInput to an HrTime, defaults to _hrtime().
 * @param time
 */
export declare function timeInputToHrTime(time: types.TimeInput): types.HrTime;
/**
 * Returns a duration of two hrTime.
 * @param startTime
 * @param endTime
 */
export declare function hrTimeDuration(startTime: types.HrTime, endTime: types.HrTime): types.HrTime;
/**
 * Convert hrTime to timestamp, for example "2019-05-14T17:00:00.000123456Z"
 * @param hrTime
 */
export declare function hrTimeToTimeStamp(hrTime: types.HrTime): string;
/**
 * Convert hrTime to nanoseconds.
 * @param hrTime
 */
export declare function hrTimeToNanoseconds(hrTime: types.HrTime): number;
/**
 * Convert hrTime to milliseconds.
 * @param hrTime
 */
export declare function hrTimeToMilliseconds(hrTime: types.HrTime): number;
/**
 * Convert hrTime to microseconds.
 * @param hrTime
 */
export declare function hrTimeToMicroseconds(hrTime: types.HrTime): number;
/**
 * check if time is HrTime
 * @param value
 */
export declare function isTimeInputHrTime(value: unknown): boolean;
/**
 * check if input value is a correct types.TimeInput
 * @param value
 */
export declare function isTimeInput(value: unknown): boolean;
