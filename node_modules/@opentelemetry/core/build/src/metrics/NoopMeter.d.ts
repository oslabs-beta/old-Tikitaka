/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { BoundCounter, DistributedContext, BoundGauge, Meter, Metric, MetricOptions, MetricUtils, BoundMeasure, SpanContext, LabelSet, Labels } from '@opentelemetry/types';
/**
 * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses constant
 * NoopMetrics for all of its methods.
 */
export declare class NoopMeter implements Meter {
    constructor();
    /**
     * Returns constant noop measure.
     * @param name the name of the metric.
     * @param [options] the metric options.
     */
    createMeasure(name: string, options?: MetricOptions): Metric<BoundMeasure>;
    /**
     * Returns a constant noop counter.
     * @param name the name of the metric.
     * @param [options] the metric options.
     */
    createCounter(name: string, options?: MetricOptions): Metric<BoundCounter>;
    /**
     * Returns a constant gauge metric.
     * @param name the name of the metric.
     * @param [options] the metric options.
     */
    createGauge(name: string, options?: MetricOptions): Metric<BoundGauge>;
    labels(labels: Labels): LabelSet;
}
export declare class NoopMetric<T> implements Metric<T> {
    private readonly _instrument;
    constructor(instrument: T);
    /**
     * Returns a Bound Instrument associated with specified LabelSet.
     * It is recommended to keep a reference to the Bound Instrument instead of always
     * calling this method for every operations.
     * @param labels the canonicalized LabelSet used to associate with this metric instrument.
     */
    bind(labels: LabelSet): T;
    /**
     * Returns a Bound Instrument for a metric with all labels not set.
     */
    getDefaultBound(): T;
    /**
     * Removes the Binding from the metric, if it is present.
     * @param labels the canonicalized LabelSet used to associate with this metric instrument.
     */
    unbind(labels: LabelSet): void;
    /**
     * Clears all timeseries from the Metric.
     */
    clear(): void;
    setCallback(fn: () => void): void;
}
export declare class NoopCounterMetric extends NoopMetric<BoundCounter> implements Pick<MetricUtils, 'add'> {
    add(value: number, labelSet: LabelSet): void;
}
export declare class NoopGaugeMetric extends NoopMetric<BoundGauge> implements Pick<MetricUtils, 'set'> {
    set(value: number, labelSet: LabelSet): void;
}
export declare class NoopMeasureMetric extends NoopMetric<BoundMeasure> implements Pick<MetricUtils, 'record'> {
    record(value: number, labelSet: LabelSet, distContext?: DistributedContext, spanContext?: SpanContext): void;
}
export declare class NoopBoundCounter implements BoundCounter {
    add(value: number): void;
}
export declare class NoopBoundGauge implements BoundGauge {
    set(value: number): void;
}
export declare class NoopBoundMeasure implements BoundMeasure {
    record(value: number, distContext?: DistributedContext, spanContext?: SpanContext): void;
}
export declare const noopMeter: NoopMeter;
export declare const NOOP_BOUND_GAUGE: NoopBoundGauge;
export declare const NOOP_GAUGE_METRIC: NoopGaugeMetric;
export declare const NOOP_BOUND_COUNTER: NoopBoundCounter;
export declare const NOOP_COUNTER_METRIC: NoopCounterMetric;
export declare const NOOP_BOUND_MEASURE: NoopBoundMeasure;
export declare const NOOP_MEASURE_METRIC: NoopMeasureMetric;
export declare const NOOP_LABEL_SET: LabelSet;
