/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as types from '@opentelemetry/types';
export declare class TracerDelegate implements types.Tracer {
    private _currentTracer;
    private readonly _tracer;
    private readonly _fallbackTracer;
    constructor(tracer?: types.Tracer, fallbackTracer?: types.Tracer);
    start(): void;
    stop(): void;
    getCurrentSpan(): types.Span | undefined;
    bind<T>(target: T, span?: types.Span): T;
    startSpan(name: string, options?: types.SpanOptions): types.Span;
    withSpan<T extends (...args: unknown[]) => ReturnType<T>>(span: types.Span, fn: T): ReturnType<T>;
    getBinaryFormat(): types.BinaryFormat;
    getHttpTextFormat(): types.HttpTextFormat;
}
