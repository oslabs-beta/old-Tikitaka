"use strict";
/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const NoopTracer_1 = require("./NoopTracer");
// Acts a bridge to the global tracer that can be safely called before the
// global tracer is initialized. The purpose of the delegation is to avoid the
// sometimes nearly intractable initialization order problems that can arise in
// applications with a complex set of dependencies. Also allows for the tracer
// to be changed/disabled during runtime without needing to change reference
// to the global tracer
class TracerDelegate {
    // Wrap a tracer with a TracerDelegate. Provided tracer becomes the default
    // fallback tracer for when a global tracer has not been initialized
    constructor(tracer, fallbackTracer) {
        this._tracer = tracer || null;
        this._fallbackTracer = fallbackTracer || new NoopTracer_1.NoopTracer();
        this._currentTracer = this._tracer || this._fallbackTracer; // equivalent to this.start()
    }
    // Begin using the user provided tracer. Stop always falling back to fallback tracer
    start() {
        this._currentTracer = this._tracer || this._fallbackTracer;
    }
    // Stop the delegate from using the provided tracer. Begin to use the fallback tracer
    stop() {
        this._currentTracer = this._fallbackTracer;
    }
    // -- Tracer interface implementation below -- //
    getCurrentSpan() {
        return this._currentTracer.getCurrentSpan.apply(this._currentTracer, 
        // tslint:disable-next-line:no-any
        arguments);
    }
    bind(target, span) {
        return this._currentTracer.bind.apply(this._currentTracer, 
        // tslint:disable-next-line:no-any
        arguments);
    }
    startSpan(name, options) {
        return this._currentTracer.startSpan.apply(this._currentTracer, 
        // tslint:disable-next-line:no-any
        arguments);
    }
    withSpan(span, fn) {
        return this._currentTracer.withSpan.apply(this._currentTracer, 
        // tslint:disable-next-line:no-any
        arguments);
    }
    getBinaryFormat() {
        return this._currentTracer.getBinaryFormat.apply(this._currentTracer, 
        // tslint:disable-next-line:no-any
        arguments);
    }
    getHttpTextFormat() {
        return this._currentTracer.getHttpTextFormat.apply(this._currentTracer, 
        // tslint:disable-next-line:no-any
        arguments);
    }
}
exports.TracerDelegate = TracerDelegate;
//# sourceMappingURL=TracerDelegate.js.map