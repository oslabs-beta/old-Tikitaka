"use strict";
/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/** Sampler that samples a given fraction of traces. */
class ProbabilitySampler {
    constructor(_probability = 0) {
        this._probability = _probability;
        this._probability = this._normalize(_probability);
    }
    shouldSample(parentContext) {
        if (this._probability >= 1.0)
            return true;
        else if (this._probability <= 0)
            return false;
        return Math.random() < this._probability;
    }
    toString() {
        // TODO: Consider to use `AlwaysSampleSampler` and `NeverSampleSampler`
        // based on the specs.
        return `ProbabilitySampler{${this._probability}}`;
    }
    _normalize(probability) {
        if (typeof probability !== 'number' || isNaN(probability))
            return 0;
        return probability >= 1 ? 1 : probability <= 0 ? 0 : probability;
    }
}
exports.ProbabilitySampler = ProbabilitySampler;
exports.ALWAYS_SAMPLER = new ProbabilitySampler(1);
exports.NEVER_SAMPLER = new ProbabilitySampler(0);
//# sourceMappingURL=ProbabilitySampler.js.map