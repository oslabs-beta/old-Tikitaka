/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ExportResult } from '@opentelemetry/base';
import { MetricExporter, ReadableMetric } from '@opentelemetry/metrics';
import { ExporterConfig } from './export/types';
export declare class PrometheusExporter implements MetricExporter {
    static readonly DEFAULT_OPTIONS: {
        port: number;
        startServer: boolean;
        endpoint: string;
        prefix: string;
    };
    private readonly _registry;
    private readonly _logger;
    private readonly _port;
    private readonly _endpoint;
    private readonly _server;
    private readonly _prefix?;
    private readonly _invalidCharacterRegex;
    /**
     * Constructor
     * @param config Exporter configuration
     * @param callback Callback to be called after a server was started
     */
    constructor(config?: ExporterConfig, callback?: () => void);
    /**
     * Saves the current values of all exported {@link ReadableMetric}s so that they can be pulled
     * by the Prometheus backend.
     *
     * @todo reach into metrics to pull metric values on endpoint
     * In its current state, the exporter saves the current values of all metrics when export
     * is called and returns them when the export endpoint is called. In the future, this should
     * be a no-op and the exporter should reach into the metrics when the export endpoint is
     * called. As there is currently no interface to do this, this is our only option.
     *
     * @param readableMetrics Metrics to be sent to the prometheus backend
     * @param cb result callback to be called on finish
     */
    export(readableMetrics: ReadableMetric[], cb: (result: ExportResult) => void): void;
    /**
     * Shuts down the export server and clears the registry
     *
     * @param cb called when server is stopped
     */
    shutdown(cb?: () => void): void;
    /**
     * Updates the value of a single metric in the registry
     *
     * @param readableMetric Metric value to be saved
     */
    private _updateMetric;
    private _getLabelValues;
    private _registerMetric;
    private _newMetric;
    private _getPrometheusMetricName;
    /**
     * Ensures metric names are valid Prometheus metric names by removing
     * characters allowed by OpenTelemetry but disallowed by Prometheus.
     *
     * https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels
     *
     * 1. Names must match `[a-zA-Z_:][a-zA-Z0-9_:]*`
     *
     * 2. Colons are reserved for user defined recording rules.
     * They should not be used by exporters or direct instrumentation.
     *
     * OpenTelemetry metric names are already validated in the Meter when they are created,
     * and they match the format `[a-zA-Z][a-zA-Z0-9_.\-]*` which is very close to a valid
     * prometheus metric name, so we only need to strip characters valid in OpenTelemetry
     * but not valid in prometheus and replace them with '_'.
     *
     * @param name name to be sanitized
     */
    private _sanitizePrometheusMetricName;
    /**
     * Stops the Prometheus export server
     * @param callback A callback that will be executed once the server is stopped
     */
    stopServer(callback?: () => void): void;
    /**
     * Starts the Prometheus export server
     *
     * @param callback called once the server is ready
     */
    startServer(callback?: () => void): void;
    /**
     * Request handler used by http library to respond to incoming requests
     * for the current state of metrics by the Prometheus backend.
     *
     * @param request Incoming HTTP request to export server
     * @param response HTTP response object used to respond to request
     */
    private _requestHandler;
    /**
     * Responds to incoming message with current state of all metrics.
     */
    private _exportMetrics;
    /**
     * Responds with 404 status code to all requests that do not match the configured endpoint.
     */
    private _notFound;
}
