"use strict";
/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const types = require("@opentelemetry/types");
const core_1 = require("@opentelemetry/core");
const zipkinTypes = require("./types");
const ZIPKIN_SPAN_KIND_MAPPING = {
    [types.SpanKind.CLIENT]: zipkinTypes.SpanKind.CLIENT,
    [types.SpanKind.SERVER]: zipkinTypes.SpanKind.SERVER,
    [types.SpanKind.CONSUMER]: zipkinTypes.SpanKind.CONSUMER,
    [types.SpanKind.PRODUCER]: zipkinTypes.SpanKind.PRODUCER,
    // When absent, the span is local.
    [types.SpanKind.INTERNAL]: undefined,
};
exports.statusCodeTagName = 'ot.status_code';
exports.statusDescriptionTagName = 'ot.status_description';
/**
 * Translate OpenTelemetry ReadableSpan to ZipkinSpan format
 * @param span Span to be translated
 */
function toZipkinSpan(span, serviceName, statusCodeTagName, statusDescriptionTagName) {
    const zipkinSpan = {
        traceId: span.spanContext.traceId,
        parentId: span.parentSpanId,
        name: span.name,
        id: span.spanContext.spanId,
        kind: ZIPKIN_SPAN_KIND_MAPPING[span.kind],
        timestamp: core_1.hrTimeToMicroseconds(span.startTime),
        duration: core_1.hrTimeToMicroseconds(span.duration),
        localEndpoint: { serviceName },
        tags: _toZipkinTags(span.attributes, span.status, statusCodeTagName, statusDescriptionTagName),
        annotations: span.events.length
            ? _toZipkinAnnotations(span.events)
            : undefined,
    };
    return zipkinSpan;
}
exports.toZipkinSpan = toZipkinSpan;
/** Converts OpenTelemetry Attributes and Status to Zipkin Tags format. */
function _toZipkinTags(attributes, status, statusCodeTagName, statusDescriptionTagName) {
    const tags = {};
    for (const key of Object.keys(attributes)) {
        tags[key] = String(attributes[key]);
    }
    tags[statusCodeTagName] = String(types.CanonicalCode[status.code]);
    if (status.message) {
        tags[statusDescriptionTagName] = status.message;
    }
    return tags;
}
exports._toZipkinTags = _toZipkinTags;
/**
 * Converts OpenTelemetry Events to Zipkin Annotations format.
 */
function _toZipkinAnnotations(events) {
    return events.map(event => ({
        timestamp: core_1.hrTimeToMicroseconds(event.time),
        value: event.name,
    }));
}
exports._toZipkinAnnotations = _toZipkinAnnotations;
//# sourceMappingURL=transform.js.map