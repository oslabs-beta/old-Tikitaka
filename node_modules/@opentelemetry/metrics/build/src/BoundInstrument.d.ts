/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as types from '@opentelemetry/types';
import { TimeSeries } from './export/types';
/**
 * This class represent the base to BoundInstrument, which is responsible for generating
 * the TimeSeries.
 */
export declare class BaseBoundInstrument {
    protected _data: number;
    protected _labelSet: types.LabelSet;
    constructor(labelSet: types.LabelSet);
    /**
     * Returns the TimeSeries with one or more Point.
     *
     * @param timestamp The time at which the instrument is recorded.
     * @returns The TimeSeries.
     */
    getTimeSeries(timestamp: types.HrTime): TimeSeries;
}
/**
 * BoundCounter allows the SDK to observe/record a single metric event. The
 * value of single instrument in the `Counter` associated with specified LabelSet.
 */
export declare class BoundCounter extends BaseBoundInstrument implements types.BoundCounter {
    private readonly _disabled;
    private readonly _monotonic;
    private readonly _valueType;
    private readonly _logger;
    private readonly _onUpdate;
    constructor(labelSet: types.LabelSet, _disabled: boolean, _monotonic: boolean, _valueType: types.ValueType, _logger: types.Logger, _onUpdate: Function);
    add(value: number): void;
}
/**
 * BoundGauge allows the SDK to observe/record a single metric event. The
 * value of single instrument in the `Gauge` associated with specified LabelSet.
 */
export declare class BoundGauge extends BaseBoundInstrument implements types.BoundGauge {
    private readonly _disabled;
    private readonly _monotonic;
    private readonly _valueType;
    private readonly _logger;
    private readonly _onUpdate;
    constructor(labelSet: types.LabelSet, _disabled: boolean, _monotonic: boolean, _valueType: types.ValueType, _logger: types.Logger, _onUpdate: Function);
    set(value: number): void;
}
/**
 * BoundMeasure is an implementation of the {@link BoundMeasure} interface.
 */
export declare class BoundMeasure extends BaseBoundInstrument implements types.BoundMeasure {
    record(value: number, distContext?: types.DistributedContext, spanContext?: types.SpanContext): void;
}
