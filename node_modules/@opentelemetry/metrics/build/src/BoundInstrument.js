"use strict";
/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const types = require("@opentelemetry/types");
/**
 * This class represent the base to BoundInstrument, which is responsible for generating
 * the TimeSeries.
 */
class BaseBoundInstrument {
    constructor(labelSet) {
        this._data = 0;
        this._labelSet = labelSet;
    }
    /**
     * Returns the TimeSeries with one or more Point.
     *
     * @param timestamp The time at which the instrument is recorded.
     * @returns The TimeSeries.
     */
    getTimeSeries(timestamp) {
        return {
            labelValues: Object.values(this._labelSet.labels).map(value => ({
                value,
            })),
            points: [{ value: this._data, timestamp }],
        };
    }
}
exports.BaseBoundInstrument = BaseBoundInstrument;
/**
 * BoundCounter allows the SDK to observe/record a single metric event. The
 * value of single instrument in the `Counter` associated with specified LabelSet.
 */
class BoundCounter extends BaseBoundInstrument {
    constructor(labelSet, _disabled, _monotonic, _valueType, _logger, _onUpdate) {
        super(labelSet);
        this._disabled = _disabled;
        this._monotonic = _monotonic;
        this._valueType = _valueType;
        this._logger = _logger;
        this._onUpdate = _onUpdate;
    }
    add(value) {
        if (this._disabled)
            return;
        if (this._monotonic && value < 0) {
            this._logger.error(`Monotonic counter cannot descend for ${Object.values(this._labelSet.labels)}`);
            return;
        }
        if (this._valueType === types.ValueType.INT && !Number.isInteger(value)) {
            this._logger.warn(`INT counter cannot accept a floating-point value for ${Object.values(this._labelSet.labels)}, ignoring the fractional digits.`);
            value = Math.trunc(value);
        }
        this._data = this._data + value;
        this._onUpdate();
    }
}
exports.BoundCounter = BoundCounter;
/**
 * BoundGauge allows the SDK to observe/record a single metric event. The
 * value of single instrument in the `Gauge` associated with specified LabelSet.
 */
class BoundGauge extends BaseBoundInstrument {
    constructor(labelSet, _disabled, _monotonic, _valueType, _logger, _onUpdate) {
        super(labelSet);
        this._disabled = _disabled;
        this._monotonic = _monotonic;
        this._valueType = _valueType;
        this._logger = _logger;
        this._onUpdate = _onUpdate;
    }
    set(value) {
        if (this._disabled)
            return;
        if (this._monotonic && value < this._data) {
            this._logger.error(`Monotonic gauge cannot descend for ${Object.values(this._labelSet.labels)}`);
            return;
        }
        if (this._valueType === types.ValueType.INT && !Number.isInteger(value)) {
            this._logger.warn(`INT gauge cannot accept a floating-point value for ${Object.values(this._labelSet.labels)}, ignoring the fractional digits.`);
            value = Math.trunc(value);
        }
        this._data = value;
        this._onUpdate();
    }
}
exports.BoundGauge = BoundGauge;
/**
 * BoundMeasure is an implementation of the {@link BoundMeasure} interface.
 */
class BoundMeasure extends BaseBoundInstrument {
    record(value, distContext, spanContext) {
        // @todo: implement this method.
        return;
    }
}
exports.BoundMeasure = BoundMeasure;
//# sourceMappingURL=BoundInstrument.js.map