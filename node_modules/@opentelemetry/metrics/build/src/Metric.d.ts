/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as types from '@opentelemetry/types';
import { BoundCounter, BoundGauge, BaseBoundInstrument } from './BoundInstrument';
import { MetricOptions } from './types';
import { ReadableMetric, MetricDescriptorType } from './export/types';
/** This is a SDK implementation of {@link Metric} interface. */
export declare abstract class Metric<T extends BaseBoundInstrument> implements types.Metric<T> {
    private readonly _name;
    private readonly _options;
    private readonly _type;
    protected readonly _monotonic: boolean;
    protected readonly _disabled: boolean;
    protected readonly _valueType: types.ValueType;
    protected readonly _logger: types.Logger;
    private readonly _metricDescriptor;
    private readonly _instruments;
    constructor(_name: string, _options: MetricOptions, _type: MetricDescriptorType);
    /**
     * Returns an Instrument associated with specified LabelSet.
     * It is recommended to keep a reference to the Instrument instead of always
     * calling this method for each operation.
     * @param labelSet the canonicalized LabelSet used to associate with this metric instrument.
     */
    bind(labelSet: types.LabelSet): T;
    /**
     * Returns a Instrument for a metric with all labels not set.
     */
    getDefaultBound(): T;
    /**
     * Removes the Instrument from the metric, if it is present.
     * @param labelSet the canonicalized LabelSet used to associate with this metric instrument.
     */
    unbind(labelSet: types.LabelSet): void;
    /**
     * Clears all Instruments from the Metric.
     */
    clear(): void;
    setCallback(fn: () => void): void;
    /**
     * Provides a ReadableMetric with one or more TimeSeries.
     * @returns The ReadableMetric, or null if TimeSeries is not present in
     *     Metric.
     */
    get(): ReadableMetric | null;
    private _getMetricDescriptor;
    protected abstract _makeInstrument(labelSet: types.LabelSet): T;
}
/** This is a SDK implementation of Counter Metric. */
export declare class CounterMetric extends Metric<BoundCounter> implements Pick<types.MetricUtils, 'add'> {
    private readonly _onUpdate;
    constructor(name: string, options: MetricOptions, _onUpdate: Function);
    protected _makeInstrument(labelSet: types.LabelSet): BoundCounter;
    /**
     * Adds the given value to the current value. Values cannot be negative.
     * @param value the value to add.
     * @param labelSet the canonicalized LabelSet used to associate with this metric's instrument.
     */
    add(value: number, labelSet: types.LabelSet): void;
}
/** This is a SDK implementation of Gauge Metric. */
export declare class GaugeMetric extends Metric<BoundGauge> implements Pick<types.MetricUtils, 'set'> {
    private readonly _onUpdate;
    constructor(name: string, options: MetricOptions, _onUpdate: Function);
    protected _makeInstrument(labelSet: types.LabelSet): BoundGauge;
    /**
     * Sets the given value. Values can be negative.
     * @param value the new value.
     * @param labelSet the canonicalized LabelSet used to associate with this metric's instrument.
     */
    set(value: number, labelSet: types.LabelSet): void;
}
