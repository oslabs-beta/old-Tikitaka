"use strict";
/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const types = require("@opentelemetry/types");
const core_1 = require("@opentelemetry/core");
const BoundInstrument_1 = require("./BoundInstrument");
const types_1 = require("./export/types");
/** This is a SDK implementation of {@link Metric} interface. */
class Metric {
    constructor(_name, _options, _type) {
        this._name = _name;
        this._options = _options;
        this._type = _type;
        this._instruments = new Map();
        this._monotonic = _options.monotonic;
        this._disabled = _options.disabled;
        this._valueType = _options.valueType;
        this._logger = _options.logger;
        this._metricDescriptor = this._getMetricDescriptor();
    }
    /**
     * Returns an Instrument associated with specified LabelSet.
     * It is recommended to keep a reference to the Instrument instead of always
     * calling this method for each operation.
     * @param labelSet the canonicalized LabelSet used to associate with this metric instrument.
     */
    bind(labelSet) {
        if (this._instruments.has(labelSet.identifier))
            return this._instruments.get(labelSet.identifier);
        const instrument = this._makeInstrument(labelSet);
        this._instruments.set(labelSet.identifier, instrument);
        return instrument;
    }
    /**
     * Returns a Instrument for a metric with all labels not set.
     */
    getDefaultBound() {
        // @todo: implement this method
        this._logger.error('not implemented yet');
        throw new Error('not implemented yet');
    }
    /**
     * Removes the Instrument from the metric, if it is present.
     * @param labelSet the canonicalized LabelSet used to associate with this metric instrument.
     */
    unbind(labelSet) {
        this._instruments.delete(labelSet.identifier);
    }
    /**
     * Clears all Instruments from the Metric.
     */
    clear() {
        this._instruments.clear();
    }
    setCallback(fn) {
        // @todo: implement this method
        this._logger.error('not implemented yet');
        return;
    }
    /**
     * Provides a ReadableMetric with one or more TimeSeries.
     * @returns The ReadableMetric, or null if TimeSeries is not present in
     *     Metric.
     */
    get() {
        if (this._instruments.size === 0)
            return null;
        const timestamp = core_1.hrTime();
        return {
            descriptor: this._metricDescriptor,
            timeseries: Array.from(this._instruments, ([_, instrument]) => instrument.getTimeSeries(timestamp)),
        };
    }
    _getMetricDescriptor() {
        return {
            name: this._name,
            description: this._options.description,
            unit: this._options.unit,
            labelKeys: this._options.labelKeys,
            type: this._type,
            monotonic: this._monotonic,
        };
    }
}
exports.Metric = Metric;
/** This is a SDK implementation of Counter Metric. */
class CounterMetric extends Metric {
    constructor(name, options, _onUpdate) {
        super(name, options, options.valueType === types.ValueType.DOUBLE
            ? types_1.MetricDescriptorType.COUNTER_DOUBLE
            : types_1.MetricDescriptorType.COUNTER_INT64);
        this._onUpdate = _onUpdate;
    }
    _makeInstrument(labelSet) {
        return new BoundInstrument_1.BoundCounter(labelSet, this._disabled, this._monotonic, this._valueType, this._logger, this._onUpdate);
    }
    /**
     * Adds the given value to the current value. Values cannot be negative.
     * @param value the value to add.
     * @param labelSet the canonicalized LabelSet used to associate with this metric's instrument.
     */
    add(value, labelSet) {
        this.bind(labelSet).add(value);
    }
}
exports.CounterMetric = CounterMetric;
/** This is a SDK implementation of Gauge Metric. */
class GaugeMetric extends Metric {
    constructor(name, options, _onUpdate) {
        super(name, options, options.valueType === types.ValueType.DOUBLE
            ? types_1.MetricDescriptorType.GAUGE_DOUBLE
            : types_1.MetricDescriptorType.GAUGE_INT64);
        this._onUpdate = _onUpdate;
    }
    _makeInstrument(labelSet) {
        return new BoundInstrument_1.BoundGauge(labelSet, this._disabled, this._monotonic, this._valueType, this._logger, this._onUpdate);
    }
    /**
     * Sets the given value. Values can be negative.
     * @param value the new value.
     * @param labelSet the canonicalized LabelSet used to associate with this metric's instrument.
     */
    set(value, labelSet) {
        this.bind(labelSet).set(value);
    }
}
exports.GaugeMetric = GaugeMetric;
//# sourceMappingURL=Metric.js.map