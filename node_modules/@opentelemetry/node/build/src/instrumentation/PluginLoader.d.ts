/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Logger, PluginConfig, TracerRegistry } from '@opentelemetry/types';
export declare enum HookState {
    UNINITIALIZED = 0,
    ENABLED = 1,
    DISABLED = 2
}
export interface Plugins {
    [pluginName: string]: PluginConfig;
}
/**
 * The PluginLoader class can load instrumentation plugins that use a patch
 * mechanism to enable automatic tracing for specific target modules.
 */
export declare class PluginLoader {
    readonly registry: TracerRegistry;
    readonly logger: Logger;
    /** A list of loaded plugins. */
    private _plugins;
    /**
     * A field that tracks whether the require-in-the-middle hook has been loaded
     * for the first time, as well as whether the hook body is activated or not.
     */
    private _hookState;
    /** Constructs a new PluginLoader instance. */
    constructor(registry: TracerRegistry, logger: Logger);
    /**
     * Loads a list of plugins. Each plugin module should implement the core
     * {@link Plugin} interface and export an instance named as 'plugin'. This
     * function will attach a hook to be called the first time the module is
     * loaded.
     * @param Plugins an object whose keys are plugin names and whose
     *     {@link PluginConfig} values indicate several configuration options.
     */
    load(plugins: Plugins): PluginLoader;
    /** Unloads plugins. */
    unload(): PluginLoader;
}
/**
 * Adds a search path for plugin modules. Intended for testing purposes only.
 * @param searchPath The path to add.
 */
export declare function searchPathForTest(searchPath: string): void;
