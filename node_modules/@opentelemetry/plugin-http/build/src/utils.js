"use strict";
/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("@opentelemetry/types");
const AttributeNames_1 = require("./enums/AttributeNames");
const url = require("url");
exports.OT_REQUEST_HEADER = 'x-opentelemetry-outgoing-request';
/**
 * Get an absolute url
 */
exports.getAbsoluteUrl = (requestUrl, headers, fallbackProtocol = 'http:') => {
    const reqUrlObject = requestUrl || {};
    const protocol = reqUrlObject.protocol || fallbackProtocol;
    const port = (reqUrlObject.port || '').toString();
    const path = reqUrlObject.path || '/';
    let host = reqUrlObject.host || reqUrlObject.hostname || headers.host || 'localhost';
    // if there is no port in host and there is a port
    // it should be displayed if it's not 80 and 443 (default ports)
    if (host.indexOf(':') === -1 &&
        port &&
        port !== '80' &&
        port !== '443') {
        host += `:${port}`;
    }
    return `${protocol}//${host}${path}`;
};
/**
 * Parse status code from HTTP response.
 */
exports.parseResponseStatus = (statusCode) => {
    if (statusCode < 200 || statusCode > 504) {
        return { code: types_1.CanonicalCode.UNKNOWN };
    }
    else if (statusCode >= 200 && statusCode < 400) {
        return { code: types_1.CanonicalCode.OK };
    }
    else {
        switch (statusCode) {
            case 400:
                return { code: types_1.CanonicalCode.INVALID_ARGUMENT };
            case 504:
                return { code: types_1.CanonicalCode.DEADLINE_EXCEEDED };
            case 404:
                return { code: types_1.CanonicalCode.NOT_FOUND };
            case 403:
                return { code: types_1.CanonicalCode.PERMISSION_DENIED };
            case 401:
                return { code: types_1.CanonicalCode.UNAUTHENTICATED };
            case 429:
                return { code: types_1.CanonicalCode.RESOURCE_EXHAUSTED };
            case 501:
                return { code: types_1.CanonicalCode.UNIMPLEMENTED };
            case 503:
                return { code: types_1.CanonicalCode.UNAVAILABLE };
            default:
                return { code: types_1.CanonicalCode.UNKNOWN };
        }
    }
};
/**
 * Returns whether the Expect header is on the given options object.
 * @param options Options for http.request.
 */
exports.hasExpectHeader = (options) => {
    if (typeof options.headers !== 'object') {
        return false;
    }
    const keys = Object.keys(options.headers);
    return !!keys.find(key => key.toLowerCase() === 'expect');
};
/**
 * Check whether the given obj match pattern
 * @param constant e.g URL of request
 * @param obj obj to inspect
 * @param pattern Match pattern
 */
exports.satisfiesPattern = (constant, pattern) => {
    if (typeof pattern === 'string') {
        return pattern === constant;
    }
    else if (pattern instanceof RegExp) {
        return pattern.test(constant);
    }
    else if (typeof pattern === 'function') {
        return pattern(constant);
    }
    else {
        throw new TypeError('Pattern is in unsupported datatype');
    }
};
/**
 * Check whether the given request is ignored by configuration
 * It will not re-throw exceptions from `list` provided by the client
 * @param constant e.g URL of request
 * @param [list] List of ignore patterns
 * @param [onException] callback for doing something when an exception has
 *     occurred
 */
exports.isIgnored = (constant, list, onException) => {
    if (!list) {
        // No ignored urls - trace everything
        return false;
    }
    // Try/catch outside the loop for failing fast
    try {
        for (const pattern of list) {
            if (exports.satisfiesPattern(constant, pattern)) {
                return true;
            }
        }
    }
    catch (e) {
        if (onException) {
            onException(e);
        }
    }
    return false;
};
/**
 * Sets the span with the error passed in params
 * @param {Span} span the span that need to be set
 * @param {Error} error error that will be set to span
 * @param {(IncomingMessage | ClientRequest)} [obj] used for enriching the status by checking the statusCode.
 */
exports.setSpanWithError = (span, error, obj) => {
    const message = error.message;
    span.setAttributes({
        [AttributeNames_1.AttributeNames.HTTP_ERROR_NAME]: error.name,
        [AttributeNames_1.AttributeNames.HTTP_ERROR_MESSAGE]: message,
    });
    if (!obj) {
        span.setStatus({ code: types_1.CanonicalCode.UNKNOWN, message });
        return;
    }
    let status;
    if (obj.statusCode) {
        status = exports.parseResponseStatus(obj.statusCode);
    }
    else if (obj.aborted) {
        status = { code: types_1.CanonicalCode.ABORTED };
    }
    else {
        status = { code: types_1.CanonicalCode.UNKNOWN };
    }
    status.message = message;
    span.setStatus(status);
};
/**
 * Makes sure options is an url object
 * return an object with default value and parsed options
 * @param options original options for the request
 * @param [extraOptions] additional options for the request
 */
exports.getRequestInfo = (options, extraOptions) => {
    let pathname = '/';
    let origin = '';
    let optionsParsed;
    if (typeof options === 'string') {
        optionsParsed = url.parse(options);
        pathname = optionsParsed.pathname || '/';
        origin = `${optionsParsed.protocol || 'http:'}//${optionsParsed.host}`;
        if (extraOptions !== undefined) {
            Object.assign(optionsParsed, extraOptions);
        }
    }
    else if (options instanceof url.URL) {
        optionsParsed = {
            protocol: options.protocol,
            hostname: typeof options.hostname === 'string' && options.hostname.startsWith('[')
                ? options.hostname.slice(1, -1)
                : options.hostname,
            path: `${options.pathname || ''}${options.search || ''}`,
        };
        if (options.port !== '') {
            optionsParsed.port = Number(options.port);
        }
        if (options.username || options.password) {
            optionsParsed.auth = `${options.username}:${options.password}`;
        }
        pathname = options.pathname;
        origin = options.origin;
        if (extraOptions !== undefined) {
            Object.assign(optionsParsed, extraOptions);
        }
    }
    else {
        optionsParsed = Object.assign({}, options);
        pathname = options.pathname;
        if (!pathname && optionsParsed.path) {
            pathname = url.parse(optionsParsed.path).pathname || '/';
        }
        origin = `${optionsParsed.protocol || 'http:'}//${optionsParsed.host ||
            `${optionsParsed.hostname}:${optionsParsed.port}`}`;
    }
    if (exports.hasExpectHeader(optionsParsed)) {
        optionsParsed.headers = Object.assign({}, optionsParsed.headers);
    }
    else if (!optionsParsed.headers) {
        optionsParsed.headers = {};
    }
    // some packages return method in lowercase..
    // ensure upperCase for consistency
    const method = optionsParsed.method
        ? optionsParsed.method.toUpperCase()
        : 'GET';
    return { origin, pathname, method, optionsParsed };
};
/**
 * Makes sure options is of type string or object
 * @param options for the request
 */
exports.isValidOptionsType = (options) => {
    if (!options) {
        return false;
    }
    const type = typeof options;
    return type === 'string' || (type === 'object' && !Array.isArray(options));
};
/**
 * Check whether the given request should be ignored
 * Use case: Typically, exporter `SpanExporter` can use http module to send spans.
 * This will also generate spans (from the http-plugin) that will be sended through the exporter
 * and here we have loop.
 * @param {RequestOptions} options
 */
exports.isOpenTelemetryRequest = (options) => {
    return !!(options && options.headers && options.headers[exports.OT_REQUEST_HEADER]);
};
/**
 * Returns outgoing request attributes scoped to the options passed to the request
 * @param {ParsedRequestOptions} requestOptions the same options used to make the request
 * @param {{ component: string, hostname: string }} options used to pass data needed to create attributes
 */
exports.getOutgoingRequestAttributes = (requestOptions, options) => {
    var _a;
    const host = requestOptions.host;
    const hostname = requestOptions.hostname || ((_a = host) === null || _a === void 0 ? void 0 : _a.replace(/^(.*)(\:[0-9]{1,5})/, '$1')) ||
        'localhost';
    const requestMethod = requestOptions.method;
    const method = requestMethod ? requestMethod.toUpperCase() : 'GET';
    const headers = requestOptions.headers || {};
    const userAgent = headers['user-agent'];
    const attributes = {
        [AttributeNames_1.AttributeNames.HTTP_URL]: exports.getAbsoluteUrl(requestOptions, headers, `${options.component}:`),
        [AttributeNames_1.AttributeNames.HTTP_METHOD]: method,
        [AttributeNames_1.AttributeNames.HTTP_TARGET]: requestOptions.path || '/',
        [AttributeNames_1.AttributeNames.NET_PEER_NAME]: hostname,
    };
    if (userAgent !== undefined) {
        attributes[AttributeNames_1.AttributeNames.HTTP_USER_AGENT] = userAgent;
    }
    return attributes;
};
/**
 * Returns attributes related to the kind of HTTP protocol used
 * @param {string} [kind] Kind of HTTP protocol used: "1.0", "1.1", "2", "SPDY" or "QUIC".
 */
exports.getAttributesFromHttpKind = (kind) => {
    const attributes = {};
    if (kind) {
        attributes[AttributeNames_1.AttributeNames.HTTP_FLAVOR] = kind;
        if (kind.toUpperCase() !== 'QUIC') {
            attributes[AttributeNames_1.AttributeNames.NET_TRANSPORT] = AttributeNames_1.AttributeNames.IP_TCP;
        }
        else {
            attributes[AttributeNames_1.AttributeNames.NET_TRANSPORT] = AttributeNames_1.AttributeNames.IP_UDP;
        }
    }
    return attributes;
};
/**
 * Returns outgoing request attributes scoped to the response data
 * @param {IncomingMessage} response the response object
 * @param {{ hostname: string }} options used to pass data needed to create attributes
 */
exports.getOutgoingRequestAttributesOnResponse = (response, options) => {
    const { statusCode, statusMessage, httpVersion, socket } = response;
    const { remoteAddress, remotePort } = socket;
    const attributes = {
        [AttributeNames_1.AttributeNames.NET_PEER_IP]: remoteAddress,
        [AttributeNames_1.AttributeNames.NET_PEER_PORT]: remotePort,
        [AttributeNames_1.AttributeNames.HTTP_HOST]: `${options.hostname}:${remotePort}`,
    };
    if (statusCode) {
        attributes[AttributeNames_1.AttributeNames.HTTP_STATUS_CODE] = statusCode;
        attributes[AttributeNames_1.AttributeNames.HTTP_STATUS_TEXT] = (statusMessage || '').toUpperCase();
    }
    const httpKindAttributes = exports.getAttributesFromHttpKind(httpVersion);
    return Object.assign(attributes, httpKindAttributes);
};
/**
 * Returns incoming request attributes scoped to the request data
 * @param {IncomingMessage} request the request object
 * @param {{ component: string, serverName?: string }} options used to pass data needed to create attributes
 */
exports.getIncomingRequestAttributes = (request, options) => {
    var _a, _b, _c;
    const headers = request.headers;
    const userAgent = headers['user-agent'];
    const ips = headers['x-forwarded-for'];
    const method = request.method || 'GET';
    const httpVersion = request.httpVersion;
    const requestUrl = request.url ? url.parse(request.url) : null;
    const host = ((_a = requestUrl) === null || _a === void 0 ? void 0 : _a.host) || headers.host;
    const hostname = ((_b = requestUrl) === null || _b === void 0 ? void 0 : _b.hostname) || ((_c = host) === null || _c === void 0 ? void 0 : _c.replace(/^(.*)(\:[0-9]{1,5})/, '$1')) ||
        'localhost';
    const serverName = options.serverName;
    const attributes = {
        [AttributeNames_1.AttributeNames.HTTP_URL]: exports.getAbsoluteUrl(requestUrl, headers, `${options.component}:`),
        [AttributeNames_1.AttributeNames.HTTP_HOST]: host,
        [AttributeNames_1.AttributeNames.NET_HOST_NAME]: hostname,
        [AttributeNames_1.AttributeNames.HTTP_METHOD]: method,
    };
    if (typeof ips === 'string') {
        attributes[AttributeNames_1.AttributeNames.HTTP_CLIENT_IP] = ips.split(',')[0];
    }
    if (typeof serverName === 'string') {
        attributes[AttributeNames_1.AttributeNames.HTTP_SERVER_NAME] = serverName;
    }
    if (requestUrl) {
        attributes[AttributeNames_1.AttributeNames.HTTP_TARGET] = requestUrl.path || '/';
        attributes[AttributeNames_1.AttributeNames.HTTP_ROUTE] = requestUrl.pathname || '/';
    }
    if (userAgent !== undefined) {
        attributes[AttributeNames_1.AttributeNames.HTTP_USER_AGENT] = userAgent;
    }
    const httpKindAttributes = exports.getAttributesFromHttpKind(httpVersion);
    return Object.assign(attributes, httpKindAttributes);
};
/**
 * Returns incoming request attributes scoped to the response data
 * @param {(ServerResponse & { socket: Socket; })} response the response object
 */
exports.getIncomingRequestAttributesOnResponse = (response) => {
    const { statusCode, statusMessage, socket } = response;
    const { localAddress, localPort, remoteAddress, remotePort } = socket;
    return {
        [AttributeNames_1.AttributeNames.NET_HOST_IP]: localAddress,
        [AttributeNames_1.AttributeNames.NET_HOST_PORT]: localPort,
        [AttributeNames_1.AttributeNames.NET_PEER_IP]: remoteAddress,
        [AttributeNames_1.AttributeNames.NET_PEER_PORT]: remotePort,
        [AttributeNames_1.AttributeNames.HTTP_STATUS_CODE]: statusCode,
        [AttributeNames_1.AttributeNames.HTTP_STATUS_TEXT]: (statusMessage || '').toUpperCase(),
    };
};
//# sourceMappingURL=utils.js.map