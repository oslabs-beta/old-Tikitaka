/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ScopeManager } from '@opentelemetry/scope-base';
export declare class AsyncHooksScopeManager implements ScopeManager {
    private _asyncHook;
    private _scopes;
    constructor();
    active(): unknown;
    with<T extends (...args: unknown[]) => ReturnType<T>>(scope: unknown, fn: T): ReturnType<T>;
    bind<T>(target: T, scope?: unknown): T;
    enable(): this;
    disable(): this;
    private _bindFunction;
    /**
     * By default, EventEmitter call their callback with their scope, which we do
     * not want, instead we will bind a specific scope to all callbacks that
     * go through it.
     * @param target EventEmitter a instance of EventEmitter to patch
     * @param scope the scope we want to bind
     */
    private _bindEventEmitter;
    /**
     * Patch methods that remove a given listener so that we match the "patched"
     * version of that listener (the one that propagate context).
     * @param ee EventEmitter instance
     * @param original reference to the patched method
     */
    private _patchRemoveListener;
    /**
     * Patch methods that remove all listeners so we remove our
     * internal references for a given event.
     * @param ee EventEmitter instance
     * @param original reference to the patched method
     */
    private _patchRemoveAllListeners;
    /**
     * Patch methods on an event emitter instance that can add listeners so we
     * can force them to propagate a given context.
     * @param ee EventEmitter instance
     * @param original reference to the patched method
     * @param [scope] scope to propagate when calling listeners
     */
    private _patchAddListener;
    /**
     * Init hook will be called when userland create a async scope, setting the
     * scope as the current one if it exist.
     * @param uid id of the async scope
     */
    private _init;
    /**
     * Destroy hook will be called when a given scope is no longer used so we can
     * remove its attached scope.
     * @param uid uid of the async scope
     */
    private _destroy;
}
