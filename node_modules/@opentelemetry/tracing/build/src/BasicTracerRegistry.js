"use strict";
/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@opentelemetry/core");
const _1 = require(".");
const config_1 = require("./config");
const MultiSpanProcessor_1 = require("./MultiSpanProcessor");
const NoopSpanProcessor_1 = require("./NoopSpanProcessor");
/**
 * This class represents a basic tracer registry which platform libraries can extend
 */
class BasicTracerRegistry {
    constructor(_config = config_1.DEFAULT_CONFIG) {
        this._config = _config;
        this._registeredSpanProcessors = [];
        this._tracers = new Map();
        this.activeSpanProcessor = new NoopSpanProcessor_1.NoopSpanProcessor();
        this.logger = _config.logger || new core_1.ConsoleLogger(_config.logLevel);
    }
    getTracer(name, version = '*', config) {
        const key = `${name}@${version}`;
        if (!this._tracers.has(key)) {
            this._tracers.set(key, new _1.Tracer(config || this._config, this));
        }
        return this._tracers.get(key);
    }
    /**
     * Adds a new {@link SpanProcessor} to this tracer.
     * @param spanProcessor the new SpanProcessor to be added.
     */
    addSpanProcessor(spanProcessor) {
        this._registeredSpanProcessors.push(spanProcessor);
        this.activeSpanProcessor = new MultiSpanProcessor_1.MultiSpanProcessor(this._registeredSpanProcessors);
    }
    getActiveSpanProcessor() {
        return this.activeSpanProcessor;
    }
}
exports.BasicTracerRegistry = BasicTracerRegistry;
//# sourceMappingURL=BasicTracerRegistry.js.map