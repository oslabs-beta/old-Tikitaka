/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as types from '@opentelemetry/types';
import { ReadableSpan } from './export/ReadableSpan';
import { Tracer } from './Tracer';
/**
 * This class represents a span.
 */
export declare class Span implements types.Span, ReadableSpan {
    readonly spanContext: types.SpanContext;
    readonly kind: types.SpanKind;
    readonly parentSpanId?: string;
    readonly attributes: types.Attributes;
    readonly links: types.Link[];
    readonly events: types.TimedEvent[];
    readonly startTime: types.HrTime;
    name: string;
    status: types.Status;
    endTime: types.HrTime;
    private _ended;
    private _duration;
    private readonly _logger;
    private readonly _spanProcessor;
    private readonly _traceParams;
    /** Constructs a new Span instance. */
    constructor(parentTracer: Tracer, spanName: string, spanContext: types.SpanContext, kind: types.SpanKind, parentSpanId?: string, links?: types.Link[], startTime?: types.TimeInput);
    context(): types.SpanContext;
    setAttribute(key: string, value: unknown): this;
    setAttributes(attributes: types.Attributes): this;
    /**
     *
     * @param name Span Name
     * @param [attributesOrStartTime] Span attributes or start time
     *     if type is {@type TimeInput} and 3rd param is undefined
     * @param [startTime] Specified start time for the event
     */
    addEvent(name: string, attributesOrStartTime?: types.Attributes | types.TimeInput, startTime?: types.TimeInput): this;
    setStatus(status: types.Status): this;
    updateName(name: string): this;
    end(endTime?: types.TimeInput): void;
    isRecording(): boolean;
    toReadableSpan(): ReadableSpan;
    get duration(): types.HrTime;
    private _isSpanEnded;
}
