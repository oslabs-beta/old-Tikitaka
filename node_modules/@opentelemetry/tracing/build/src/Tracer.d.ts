/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as types from '@opentelemetry/types';
import { TracerConfig, TraceParams } from './types';
import { BasicTracerRegistry } from './BasicTracerRegistry';
/**
 * This class represents a basic tracer.
 */
export declare class Tracer implements types.Tracer {
    private _tracerRegistry;
    private readonly _defaultAttributes;
    private readonly _binaryFormat;
    private readonly _httpTextFormat;
    private readonly _sampler;
    private readonly _scopeManager;
    private readonly _traceParams;
    readonly logger: types.Logger;
    /**
     * Constructs a new Tracer instance.
     */
    constructor(config: TracerConfig | undefined, _tracerRegistry: BasicTracerRegistry);
    /**
     * Starts a new Span or returns the default NoopSpan based on the sampling
     * decision.
     */
    startSpan(name: string, options?: types.SpanOptions): types.Span;
    /**
     * Returns the current Span from the current context.
     *
     * If there is no Span associated with the current context, null is returned.
     */
    getCurrentSpan(): types.Span | undefined;
    /**
     * Enters the scope of code where the given Span is in the current context.
     */
    withSpan<T extends (...args: unknown[]) => ReturnType<T>>(span: types.Span, fn: T): ReturnType<T>;
    /**
     * Bind a span (or the current one) to the target's scope
     */
    bind<T>(target: T, span?: types.Span): T;
    /**
     * Returns the binary format interface which can serialize/deserialize Spans.
     */
    getBinaryFormat(): types.BinaryFormat;
    /**
     * Returns the HTTP text format interface which can inject/extract Spans.
     */
    getHttpTextFormat(): types.HttpTextFormat;
    /** Returns the active {@link TraceParams}. */
    getActiveTraceParams(): TraceParams;
    getActiveSpanProcessor(): import("./SpanProcessor").SpanProcessor;
    private _getParentSpanContext;
}
